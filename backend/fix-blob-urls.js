const mongoose = require('mongoose');
require('dotenv').config();

// Po≈ÇƒÖczenie z bazƒÖ danych
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

const MarketplaceProduct = require('./models/marketplaceProductModel');

async function fixBlobUrls() {
  try {
    console.log('üîß Naprawianie blob URL-i w bazie danych...');
    
    // Znajd≈∫ produkty z blob URL-ami
    const productsWithBlobUrls = await MarketplaceProduct.find({
      $or: [
        { 'images': { $regex: /^blob:/ } },
        { 'mainImage': { $regex: /^blob:/ } }
      ]
    });
    
    console.log(`üì¶ Znaleziono ${productsWithBlobUrls.length} produkt√≥w z blob URL-ami`);
    
    for (const product of productsWithBlobUrls) {
      console.log(`\nüîç Produkt: ${product.name} (ID: ${product._id})`);
      
      // Wyczy≈õƒá blob URL-e z images
      if (product.images && Array.isArray(product.images)) {
        const cleanImages = product.images.filter(img => !img.startsWith('blob:'));
        console.log(`  üì∑ Images: ${product.images.length} -> ${cleanImages.length}`);
        product.images = cleanImages;
      }
      
      // Wyczy≈õƒá blob URL z mainImage
      if (product.mainImage && product.mainImage.startsWith('blob:')) {
        console.log(`  üñºÔ∏è MainImage: ${product.mainImage} -> null`);
        product.mainImage = null;
      }
      
      // Je≈õli nie ma mainImage ale sƒÖ images, ustaw pierwszy jako mainImage
      if (!product.mainImage && product.images && product.images.length > 0) {
        product.mainImage = product.images[0];
        console.log(`  üñºÔ∏è Ustawiono mainImage: ${product.mainImage}`);
      }
      
      await product.save();
      console.log(`  ‚úÖ Zaktualizowano produkt`);
    }
    
    console.log('\n‚úÖ Naprawa blob URL-i zako≈Ñczona');
    
    // Sprawd≈∫ wyniki
    const remainingBlobUrls = await MarketplaceProduct.find({
      $or: [
        { 'images': { $regex: /^blob:/ } },
        { 'mainImage': { $regex: /^blob:/ } }
      ]
    });
    
    if (remainingBlobUrls.length === 0) {
      console.log('‚úÖ Wszystkie blob URL-e zosta≈Çy usuniƒôte');
    } else {
      console.log(`‚ö†Ô∏è Pozosta≈Ço ${remainingBlobUrls.length} produkt√≥w z blob URL-ami`);
    }
    
  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas naprawy blob URL-i:', error);
  } finally {
    mongoose.connection.close();
  }
}

fixBlobUrls(); 