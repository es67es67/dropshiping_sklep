const mongoose = require('mongoose');
require('dotenv').config();
const fs = require('fs');
const path = require('path');

// Po≈ÇƒÖczenie z bazƒÖ danych
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

const MarketplaceProduct = require('./models/marketplaceProductModel');

async function cleanupOldUploads() {
  try {
    console.log('üßπ Czyszczenie starych plik√≥w z folderu uploads...');
    
    // Usu≈Ñ wszystkie pliki z folderu uploads
    const uploadsDir = path.join(__dirname, 'uploads');
    if (fs.existsSync(uploadsDir)) {
      const files = fs.readdirSync(uploadsDir);
      console.log(`üìÅ Znaleziono ${files.length} plik√≥w w folderze uploads`);
      
      for (const file of files) {
        const filePath = path.join(uploadsDir, file);
        fs.unlinkSync(filePath);
        console.log(`üóëÔ∏è Usuniƒôto: ${file}`);
      }
      
      console.log('‚úÖ Wszystkie pliki z folderu uploads zosta≈Çy usuniƒôte');
    }
    
    console.log('\nüîß Aktualizacja bazy danych...');
    
    // Znajd≈∫ produkty z URL-ami z folderu uploads
    const productsWithUploadUrls = await MarketplaceProduct.find({
      $or: [
        { 'images': { $regex: /^\/uploads\// } },
        { 'mainImage': { $regex: /^\/uploads\// } }
      ]
    });
    
    console.log(`üì¶ Znaleziono ${productsWithUploadUrls.length} produkt√≥w z URL-ami z uploads`);
    
    for (const product of productsWithUploadUrls) {
      console.log(`\nüîç Produkt: ${product.name} (ID: ${product._id})`);
      
      // Wyczy≈õƒá URL-e z folderu uploads
      if (product.images && Array.isArray(product.images)) {
        const cleanImages = product.images.filter(img => !img.startsWith('/uploads/'));
        console.log(`  üì∑ Images: ${product.images.length} -> ${cleanImages.length}`);
        product.images = cleanImages;
      }
      
      // Wyczy≈õƒá URL z mainImage
      if (product.mainImage && product.mainImage.startsWith('/uploads/')) {
        console.log(`  üñºÔ∏è MainImage: ${product.mainImage} -> null`);
        product.mainImage = null;
      }
      
      // Je≈õli nie ma mainImage ale sƒÖ images, ustaw pierwszy jako mainImage
      if (!product.mainImage && product.images && product.images.length > 0) {
        product.mainImage = product.images[0];
        console.log(`  üñºÔ∏è Ustawiono mainImage: ${product.mainImage}`);
      }
      
      await product.save();
      console.log(`  ‚úÖ Zaktualizowano produkt`);
    }
    
    console.log('\n‚úÖ Czyszczenie zako≈Ñczone');
    
    // Sprawd≈∫ wyniki
    const remainingUploadUrls = await MarketplaceProduct.find({
      $or: [
        { 'images': { $regex: /^\/uploads\// } },
        { 'mainImage': { $regex: /^\/uploads\// } }
      ]
    });
    
    if (remainingUploadUrls.length === 0) {
      console.log('‚úÖ Wszystkie URL-e z folderu uploads zosta≈Çy usuniƒôte');
    } else {
      console.log(`‚ö†Ô∏è Pozosta≈Ço ${remainingUploadUrls.length} produkt√≥w z URL-ami z uploads`);
    }
    
  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas czyszczenia:', error);
  } finally {
    mongoose.connection.close();
  }
}

cleanupOldUploads(); 