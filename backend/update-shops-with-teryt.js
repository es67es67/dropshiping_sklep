const mongoose = require('mongoose');
const Shop = require('./models/shopModel');
const Location = require('./models/locationModel');
require('dotenv').config();

// Mapowanie nazw wojew√≥dztw na kody TERC
const voivodeshipCodes = {
  'Dolno≈õlƒÖskie': '02',
  'Kujawsko-Pomorskie': '04',
  'Lubelskie': '06',
  'Lubuskie': '08',
  '≈Å√≥dzkie': '10',
  'Ma≈Çopolskie': '12',
  'Mazowieckie': '14',
  'Opolskie': '16',
  'Podkarpackie': '18',
  'Podlaskie': '20',
  'Pomorskie': '22',
  '≈ölƒÖskie': '24',
  '≈öwiƒôtokrzyskie': '26',
  'Warmi≈Ñsko-Mazurskie': '28',
  'Wielkopolskie': '30',
  'Zachodniopomorskie': '32'
};

// Przyk≈Çadowe kody SIMC dla g≈Ç√≥wnych miast (w rzeczywisto≈õci pobiera≈Çoby siƒô z bazy GUS)
const citySimcCodes = {
  'Warszawa': '0918123',
  'Krak√≥w': '0950463',
  'Wroc≈Çaw': '0986283',
  'Pozna≈Ñ': '0969663',
  'Gda≈Ñsk': '2269433',
  'Szczecin': '3211633',
  'Bydgoszcz': '0401011',
  'Lublin': '0954700',
  'Katowice': '2469011',
  'Bia≈Çystok': '2001011',
  'Gdynia': '2268623',
  'Czƒôstochowa': '2462011',
  'Radom': '1463011',
  'Sosnowiec': '2472011',
  'Toru≈Ñ': '0463011',
  'Kielce': '2661011',
  'Gliwice': '2466011',
  'Zabrze': '2475011',
  'Bytom': '2469011',
  'Bielsko-Bia≈Ça': '2461011',
  'Olsztyn': '2862011',
  'Rzesz√≥w': '1863011',
  'Ruda ≈ölƒÖska': '2474011',
  'Rybnik': '2476011',
  'Tychy': '2477011',
  'DƒÖbrowa G√≥rnicza': '2463011',
  'P≈Çock': '1462011',
  'ElblƒÖg': '2863011',
  'Opole': '1662011',
  'Gorz√≥w Wielkopolski': '0861011',
  'Wa≈Çbrzych': '0262011',
  'W≈Çoc≈Çawek': '0464011',
  'Tarn√≥w': '1263011',
  'Chorz√≥w': '2463011',
  'Kalisz': '3061011',
  'Koszalin': '3269011',
  'Legnica': '0261011',
  'GrudziƒÖdz': '0462011',
  'S≈Çupsk': '2269011',
  'Jaworzno': '2464011',
  'Jastrzƒôbie-Zdr√≥j': '2465011',
  'Nowy SƒÖcz': '1262011',
  'Jelenia G√≥ra': '0263011',
  'Siedlce': '1464011',
  'Mys≈Çowice': '2467011',
  'Konin': '3062011',
  'Piotrk√≥w Trybunalski': '1062011',
  'Lubin': '0264011',
  'Inowroc≈Çaw': '0465011',
  'Ostrowiec ≈öwiƒôtokrzyski': '2662011',
  'Suwa≈Çki': '2062011',
  'Stargard': '3214011',
  'Gniezno': '3063011',
  'Zamo≈õƒá': '0664011',
  'Leszno': '3064011',
  'Zielona G√≥ra': '0862011',
  'Przemy≈õl': '1862011',
  'Tarnobrzeg': '1864011',
  'Che≈Çm': '0662011',
  'E≈Çk': '2864011',
  'Pruszk√≥w': '1462011',
  'Legionowo': '1462021',
  'Ostro≈Çƒôka': '1465011',
  'Starachowice': '2663011',
  'Zawiercie': '2468011',
  'Mielec': '1811011',
  'Krosno': '1865011',
  'Dƒôbica': '1803011',
  'Sanok': '1866011',
  'Jaros≈Çaw': '1867011',
  '≈Åa≈Ñcut': '1868011',
  'Przeworsk': '1869011',
  'Nisko': '1870011',
  'Kra≈õnik': '0663011',
  'Pu≈Çawy': '0664011',
  '≈öwidnik': '0665011',
  'Bia≈Ça Podlaska': '0666011',
  '≈Åuk√≥w': '0667011',
  'Radzy≈Ñ Podlaski': '0668011',
  'Miƒôdzyrzec Podlaski': '0669011',
  'Parczew': '0670011',
  'W≈Çodawa': '0671011',
  'Bi≈Çgoraj': '0672011',
  'Tomasz√≥w Lubelski': '0673011',
  'Hrubiesz√≥w': '0674011',
  'Jan√≥w Lubelski': '0675011',
  'Krasnystaw': '0676011',
  'Lubart√≥w': '0677011'
};

// Przyk≈Çadowe kody ULIC dla g≈Ç√≥wnych ulic (w rzeczywisto≈õci pobiera≈Çoby siƒô z bazy GUS)
const streetUlicCodes = {
  'ul. Przyk≈Çadowa': '00001',
  'ul. G≈Ç√≥wna': '00002',
  'ul. D≈Çuga': '00003',
  'ul. Kr√≥tka': '00004',
  'ul. Szeroka': '00005',
  'ul. WƒÖska': '00006',
  'ul. Nowa': '00007',
  'ul. Stara': '00008',
  'ul. Centralna': '00009',
  'ul. P√≥≈Çnocna': '00010',
  'ul. Po≈Çudniowa': '00011',
  'ul. Wschodnia': '00012',
  'ul. Zachodnia': '00013',
  'ul. Kwiatowa': '00014',
  'ul. S≈Çoneczna': '00015',
  'ul. Deszczowa': '00016',
  'ul. Spokojna': '00017',
  'ul. Weso≈Ça': '00018',
  'ul. Smutna': '00019',
  'ul. Cicha': '00020'
};

async function updateShopsWithTeryt() {
  try {
    console.log('üîå ≈ÅƒÖczenie z MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb+srv://es67jw:xlnepf0D4JXZtGwT@cluster0.hku8kvd.mongodb.net/portal?retryWrites=true&w=majority&appName=Cluster0');
    console.log('‚úÖ Po≈ÇƒÖczono z MongoDB');

    // Pobierz wszystkie sklepy
    const shops = await Shop.find({});
    console.log(`üìä Znaleziono ${shops.length} sklep√≥w do aktualizacji`);

    let updatedCount = 0;
    let skippedCount = 0;

    for (const shop of shops) {
      try {
        let updated = false;
        
        // Sprawd≈∫ czy sklep ma ju≈º kody TERYT
        if (shop.teryt && shop.teryt.fullCode) {
          console.log(`‚è≠Ô∏è Sklep ${shop.name} ju≈º ma kody TERYT, pomijam`);
          skippedCount++;
          continue;
        }

        // Inicjalizuj obiekt teryt je≈õli nie istnieje
        if (!shop.teryt) {
          shop.teryt = {};
        }

        // Znajd≈∫ kod wojew√≥dztwa
        if (shop.address.voivodeship && voivodeshipCodes[shop.address.voivodeship]) {
          shop.teryt.voivodeshipCode = voivodeshipCodes[shop.address.voivodeship];
          updated = true;
        }

        // Znajd≈∫ kod SIMC dla miasta
        if (shop.address.city && citySimcCodes[shop.address.city]) {
          shop.teryt.simcCode = citySimcCodes[shop.address.city];
          updated = true;
        }

        // Znajd≈∫ kod ULIC dla ulicy
        if (shop.address.street && streetUlicCodes[shop.address.street]) {
          shop.teryt.ulicCode = streetUlicCodes[shop.address.street];
          updated = true;
        }

        // Wygeneruj kod TERC (wojew√≥dztwo + powiat + gmina)
        // Na razie u≈ºywamy domy≈õlnych kod√≥w powiatu i gminy
        if (shop.teryt.voivodeshipCode) {
          shop.teryt.countyCode = '01'; // Domy≈õlny kod powiatu
          shop.teryt.municipalityCode = '01'; // Domy≈õlny kod gminy
          shop.teryt.tercCode = `${shop.teryt.voivodeshipCode}${shop.teryt.countyCode}${shop.teryt.municipalityCode}`;
          updated = true;
        }

        // Wygeneruj pe≈Çny kod TERYT
        if (updated) {
          // Wygeneruj pe≈Çny kod bez wywo≈Çywania save()
          if (shop.teryt.tercCode && shop.teryt.simcCode && shop.teryt.ulicCode) {
            shop.teryt.fullCode = `${shop.teryt.tercCode}${shop.teryt.simcCode}${shop.teryt.ulicCode}`;
          } else if (shop.teryt.tercCode && shop.teryt.simcCode) {
            shop.teryt.fullCode = `${shop.teryt.tercCode}${shop.teryt.simcCode}`;
          } else if (shop.teryt.tercCode) {
            shop.teryt.fullCode = shop.teryt.tercCode;
          }
          
          await shop.save();
          console.log(`‚úÖ Zaktualizowano sklep: ${shop.name} - ${shop.teryt.fullCode}`);
          updatedCount++;
        } else {
          console.log(`‚ö†Ô∏è Nie uda≈Ço siƒô znale≈∫ƒá kod√≥w TERYT dla: ${shop.name}`);
          skippedCount++;
        }

      } catch (error) {
        console.error(`‚ùå B≈ÇƒÖd podczas aktualizacji sklepu ${shop.name}:`, error.message);
        skippedCount++;
      }
    }

    console.log(`\nüìä Podsumowanie aktualizacji:`);
    console.log(`   Zaktualizowanych sklep√≥w: ${updatedCount}`);
    console.log(`   Pominiƒôtych sklep√≥w: ${skippedCount}`);
    console.log(`   ≈ÅƒÖcznie sklep√≥w: ${shops.length}`);

    // Poka≈º przyk≈Çady zaktualizowanych sklep√≥w
    console.log(`\nüè™ Przyk≈Çady zaktualizowanych sklep√≥w:`);
    const sampleShops = await Shop.find({ 'teryt.fullCode': { $exists: true } }).limit(5);
    sampleShops.forEach((shop, index) => {
      console.log(`   ${index + 1}. ${shop.name} - ${shop.address.city}`);
      console.log(`      TERC: ${shop.teryt.tercCode || 'brak'}`);
      console.log(`      SIMC: ${shop.teryt.simcCode || 'brak'}`);
      console.log(`      ULIC: ${shop.teryt.ulicCode || 'brak'}`);
      console.log(`      Pe≈Çny kod: ${shop.teryt.fullCode || 'brak'}`);
      console.log('');
    });

  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas aktualizacji sklep√≥w:', error);
  } finally {
    console.log('üîå Zamykanie po≈ÇƒÖczenia...');
    await mongoose.disconnect();
    console.log('‚úÖ Roz≈ÇƒÖczono z MongoDB');
  }
}

updateShopsWithTeryt(); 