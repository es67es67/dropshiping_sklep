const mongoose = require('mongoose');
require('dotenv').config();

mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('‚úÖ Po≈ÇƒÖczono z MongoDB'))
  .catch(err => console.error('‚ùå B≈ÇƒÖd po≈ÇƒÖczenia z MongoDB:', err));

const ErrorModel = require('./models/errorModel');
const User = require('./models/userModel');

async function checkRegistrationErrors() {
  try {
    console.log('üîç Sprawdzam b≈Çƒôdy rejestracji w bazie danych...\n');

    // Sprawd≈∫ wszystkie b≈Çƒôdy zwiƒÖzane z rejestracjƒÖ
    const registrationErrors = await ErrorModel.find({
      $or: [
        { 'context.additionalData.action': 'register' },
        { route: /register/ },
        { url: /register/ },
        { message: /rejestracja|register|walidacji/ }
      ]
    }).sort({ timestamp: -1 }).limit(20);

    console.log(`üìä Znaleziono ${registrationErrors.length} b≈Çƒôd√≥w rejestracji:`);
    
    if (registrationErrors.length === 0) {
      console.log('‚úÖ Brak b≈Çƒôd√≥w rejestracji w bazie danych');
    } else {
      registrationErrors.forEach((error, index) => {
        console.log(`\n${index + 1}. B≈ÇƒÖd rejestracji:`);
        console.log(`   üìÖ Data: ${error.timestamp.toLocaleString('pl-PL')}`);
        console.log(`   üìù Wiadomo≈õƒá: ${error.message}`);
        console.log(`   üè∑Ô∏è  Typ: ${error.type}`);
        console.log(`   ‚ö†Ô∏è  Wa≈ºno≈õƒá: ${error.severity}`);
        console.log(`   üîó URL: ${error.url}`);
        
        if (error.context && error.context.additionalData) {
          const data = error.context.additionalData;
          console.log(`   üìã Akcja: ${data.action || 'brak'}`);
          if (data.requestData) {
            console.log(`   üë§ Dane: ${JSON.stringify(data.requestData)}`);
          }
          if (data.validationErrors && data.validationErrors.length > 0) {
            console.log(`   ‚ùå B≈Çƒôdy walidacji: ${data.validationErrors.join(', ')}`);
          }
        }
      });
    }

    // Sprawd≈∫ statystyki b≈Çƒôd√≥w
    console.log('\nüìà Statystyki b≈Çƒôd√≥w:');
    const stats = await ErrorModel.getErrorStats();
    if (stats.length > 0) {
      const stat = stats[0];
      console.log(`   üìä Wszystkie b≈Çƒôdy: ${stat.totalErrors}`);
      console.log(`   üî¥ Krytyczne: ${stat.criticalErrors}`);
      console.log(`   üü† Wysokie: ${stat.highErrors}`);
      console.log(`   üü° ≈örednie: ${stat.mediumErrors}`);
      console.log(`   üü¢ Niskie: ${stat.lowErrors}`);
      console.log(`   ‚úÖ RozwiƒÖzane: ${stat.resolvedErrors}`);
      console.log(`   üÜï Nowe: ${stat.newErrors}`);
    }

    // Sprawd≈∫ b≈Çƒôdy wed≈Çug typu
    console.log('\nüìã B≈Çƒôdy wed≈Çug typu:');
    const errorsByType = await ErrorModel.getErrorsByType();
    errorsByType.forEach(type => {
      console.log(`   ${type._id}: ${type.count} (krytyczne: ${type.critical}, wysokie: ${type.high})`);
    });

    // Sprawd≈∫ ostatnie u≈ºytkownik√≥w
    console.log('\nüë• Ostatni zarejestrowani u≈ºytkownicy:');
    const recentUsers = await User.find({})
      .select('username email firstName lastName createdAt')
      .sort({ createdAt: -1 })
      .limit(10);

    console.log(`   Znaleziono ${recentUsers.length} u≈ºytkownik√≥w:`);
    recentUsers.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.username} (${user.email}) - ${user.firstName} ${user.lastName} - ${user.createdAt.toLocaleString('pl-PL')}`);
    });

    // Sprawd≈∫ b≈Çƒôdy walidacji
    console.log('\nüîç Szczeg√≥≈Çowe b≈Çƒôdy walidacji:');
    const validationErrors = await ErrorModel.find({
      message: /walidacji|validation/
    }).sort({ timestamp: -1 }).limit(10);

    if (validationErrors.length > 0) {
      validationErrors.forEach((error, index) => {
        console.log(`   ${index + 1}. ${error.message} - ${error.timestamp.toLocaleString('pl-PL')}`);
        if (error.context && error.context.additionalData && error.context.additionalData.validationErrors) {
          console.log(`      B≈Çƒôdy: ${error.context.additionalData.validationErrors.join(', ')}`);
        }
      });
    } else {
      console.log('   ‚úÖ Brak b≈Çƒôd√≥w walidacji');
    }

  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas sprawdzania b≈Çƒôd√≥w:', error);
  } finally {
    mongoose.connection.close();
  }
}

// Uruchom sprawdzanie
checkRegistrationErrors(); 