const mongoose = require('mongoose');

// Konfiguracja po≈ÇƒÖczenia z MongoDB
const MONGODB_URI = 'mongodb+srv://es67jw:xlnepf0D4JXZtGwT@cluster0.hku8kvd.mongodb.net/portal?retryWrites=true&w=majority&appName=Cluster0';

// Konfiguracja przemianowania
const RENAME_CONFIG = {
  from: 'ulicas',
  to: 'ulice'
};

class CollectionRenamer {
  constructor() {
    this.stats = {
      documentsCounted: 0,
      documentsRenamed: 0,
      errors: 0
    };
  }

  async connect() {
    try {
      await mongoose.connect(MONGODB_URI, {
        maxPoolSize: 10,
        serverSelectionTimeoutMS: 5000,
        socketTimeoutMS: 45000,
      });
      console.log('‚úÖ Po≈ÇƒÖczono z MongoDB');
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd po≈ÇƒÖczenia z MongoDB:', error);
      throw error;
    }
  }

  async getDatabase() {
    return mongoose.connection.db;
  }

  async checkCollectionExists(collectionName) {
    try {
      const db = await this.getDatabase();
      const collections = await db.listCollections({ name: collectionName }).toArray();
      return collections.length > 0;
    } catch (error) {
      console.error(`‚ùå B≈ÇƒÖd sprawdzania kolekcji ${collectionName}:`, error);
      return false;
    }
  }

  async getCollectionStats(collectionName) {
    try {
      const db = await this.getDatabase();
      const collection = db.collection(collectionName);
      const count = await collection.countDocuments();
      return count;
    } catch (error) {
      console.error(`‚ùå B≈ÇƒÖd pobierania statystyk kolekcji ${collectionName}:`, error);
      return 0;
    }
  }

  async listAllCollections() {
    try {
      const db = await this.getDatabase();
      const collections = await db.listCollections().toArray();
      console.log('\nüìã Wszystkie kolekcje w bazie danych:');
      collections.forEach((collection, index) => {
        console.log(`   ${index + 1}. ${collection.name}`);
      });
      return collections;
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd podczas listowania kolekcji:', error);
      throw error;
    }
  }

  async renameCollection() {
    try {
      console.log('üîÑ Rozpoczynam przemianowanie kolekcji...');
      console.log(`üìã Przemianowanie: ${RENAME_CONFIG.from} ‚Üí ${RENAME_CONFIG.to}`);
      
      const db = await this.getDatabase();
      
      // Sprawd≈∫ czy kolekcja ≈∫r√≥d≈Çowa istnieje
      const sourceExists = await this.checkCollectionExists(RENAME_CONFIG.from);
      if (!sourceExists) {
        console.log(`‚ùå Kolekcja ≈∫r√≥d≈Çowa '${RENAME_CONFIG.from}' nie istnieje!`);
        this.stats.errors++;
        return false;
      }
      
      // Sprawd≈∫ czy kolekcja docelowa ju≈º istnieje
      const targetExists = await this.checkCollectionExists(RENAME_CONFIG.to);
      if (targetExists) {
        console.log(`‚ùå Kolekcja docelowa '${RENAME_CONFIG.to}' ju≈º istnieje!`);
        console.log('‚ö†Ô∏è  Nie mo≈ºna przemianowaƒá - kolekcja docelowa ju≈º istnieje');
        this.stats.errors++;
        return false;
      }
      
      // Pobierz statystyki kolekcji ≈∫r√≥d≈Çowej
      const documentCount = await this.getCollectionStats(RENAME_CONFIG.from);
      console.log(`üìä Dokumenty w kolekcji ${RENAME_CONFIG.from}: ${documentCount}`);
      this.stats.documentsCounted = documentCount;
      
      if (documentCount === 0) {
        console.log('‚ö†Ô∏è  Kolekcja jest pusta - przemianowanie pustej kolekcji');
      }
      
      // Potwierdzenie operacji
      console.log(`\n‚ö†Ô∏è  UWAGA: Przemianowujƒô kolekcjƒô ${RENAME_CONFIG.from} na ${RENAME_CONFIG.to}`);
      console.log(`   Dokumenty: ${documentCount}`);
      console.log('   Operacja jest bezpieczna - dane zostanƒÖ zachowane');
      
      // Przemianuj kolekcjƒô
      console.log('\nüîÑ Przemianowywanie w toku...');
      await db.renameCollection(RENAME_CONFIG.from, RENAME_CONFIG.to);
      
      console.log(`‚úÖ Pomy≈õlnie przemianowano kolekcjƒô: ${RENAME_CONFIG.from} ‚Üí ${RENAME_CONFIG.to}`);
      this.stats.documentsRenamed = documentCount;
      
      return true;
      
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd podczas przemianowania kolekcji:', error);
      this.stats.errors++;
      return false;
    }
  }

  async verifyRename() {
    try {
      console.log('\nüîç Weryfikacja przemianowania...');
      
      // Sprawd≈∫ czy kolekcja ≈∫r√≥d≈Çowa nie istnieje
      const sourceExists = await this.checkCollectionExists(RENAME_CONFIG.from);
      if (sourceExists) {
        console.log(`‚ùå B≈ÅƒÑD: Kolekcja ≈∫r√≥d≈Çowa '${RENAME_CONFIG.from}' nadal istnieje!`);
        return false;
      } else {
        console.log(`‚úÖ Kolekcja ≈∫r√≥d≈Çowa '${RENAME_CONFIG.from}' zosta≈Ça usuniƒôta`);
      }
      
      // Sprawd≈∫ czy kolekcja docelowa istnieje
      const targetExists = await this.checkCollectionExists(RENAME_CONFIG.to);
      if (!targetExists) {
        console.log(`‚ùå B≈ÅƒÑD: Kolekcja docelowa '${RENAME_CONFIG.to}' nie istnieje!`);
        return false;
      } else {
        console.log(`‚úÖ Kolekcja docelowa '${RENAME_CONFIG.to}' zosta≈Ça utworzona`);
      }
      
      // Sprawd≈∫ liczbƒô dokument√≥w w nowej kolekcji
      const newDocumentCount = await this.getCollectionStats(RENAME_CONFIG.to);
      console.log(`üìä Dokumenty w nowej kolekcji ${RENAME_CONFIG.to}: ${newDocumentCount}`);
      
      if (newDocumentCount === this.stats.documentsCounted) {
        console.log('‚úÖ Liczba dokument√≥w siƒô zgadza - wszystkie dane zosta≈Çy zachowane');
        return true;
      } else {
        console.log(`‚ùå B≈ÅƒÑD: Liczba dokument√≥w siƒô nie zgadza!`);
        console.log(`   Oczekiwano: ${this.stats.documentsCounted}, Znaleziono: ${newDocumentCount}`);
        return false;
      }
      
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd podczas weryfikacji:', error);
      return false;
    }
  }

  async run() {
    try {
      console.log('üîÑ Skrypt przemianowania kolekcji');
      console.log('='.repeat(50));
      
      await this.connect();
      
      // Poka≈º kolekcje przed przemianowaniem
      console.log('\nüìã Kolekcje przed przemianowaniem:');
      await this.listAllCollections();
      
      // Przemianuj kolekcjƒô
      const success = await this.renameCollection();
      
      if (success) {
        // Weryfikuj przemianowanie
        const verified = await this.verifyRename();
        
        if (verified) {
          // Poka≈º kolekcje po przemianowaniu
          console.log('\nüìã Kolekcje po przemianowaniu:');
          await this.listAllCollections();
          
          // Podsumowanie
          console.log('\nüìä PODSUMOWANIE OPERACJI:');
          console.log(`‚úÖ Przemianowano: ${RENAME_CONFIG.from} ‚Üí ${RENAME_CONFIG.to}`);
          console.log(`üìä Dokumenty: ${this.stats.documentsRenamed}`);
          console.log(`‚ùå B≈Çƒôdy: ${this.stats.errors}`);
          
          console.log('\nüéâ Operacja zako≈Ñczona pomy≈õlnie!');
        } else {
          console.log('\n‚ùå Weryfikacja nie powiod≈Ça siƒô!');
        }
      } else {
        console.log('\n‚ùå Przemianowanie nie powiod≈Ço siƒô!');
      }
      
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd podczas wykonywania skryptu:', error);
    } finally {
      await mongoose.disconnect();
      console.log('üîå Roz≈ÇƒÖczono z MongoDB');
    }
  }
}

// Uruchom skrypt
const renamer = new CollectionRenamer();
renamer.run();

module.exports = CollectionRenamer; 