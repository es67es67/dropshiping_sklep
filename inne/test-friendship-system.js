const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

async function testFriendshipSystem() {
  console.log('üß™ Testowanie systemu znajomych...');
  
  const browser = await puppeteer.launch({
    headless: false,
    defaultViewport: { width: 1920, height: 1080 },
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  const page = await browser.newPage();
  
  try {
    // Przejd≈∫ do strony g≈Ç√≥wnej
    console.log('üåê Przechodzƒô do strony g≈Ç√≥wnej...');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    
    // Zarejestruj pierwszego u≈ºytkownika
    console.log('üë§ Rejestracja pierwszego u≈ºytkownika...');
    await page.click('a[href="/register"]');
    await page.waitForSelector('form');
    
    await page.type('input[name="firstName"]', 'Jan');
    await page.type('input[name="lastName"]', 'Kowalski');
    await page.type('input[name="username"]', 'jankowalski');
    await page.type('input[name="email"]', 'jan.kowalski@example.com');
    await page.type('input[name="password"]', 'test123');
    await page.type('input[name="dateOfBirth"]', '1990-01-01');
    
    await page.click('button[type="submit"]');
    await page.waitForNavigation();
    
    // Zaloguj siƒô
    console.log('üîë Logowanie...');
    await page.click('a[href="/login"]');
    await page.waitForSelector('form');
    
    await page.type('input[name="email"]', 'jan.kowalski@example.com');
    await page.type('input[name="password"]', 'test123');
    
    await page.click('button[type="submit"]');
    await page.waitForNavigation();
    
    // Przejd≈∫ do systemu znajomych
    console.log('üë• Przechodzƒô do systemu znajomych...');
    await page.click('a[href="/friends"]');
    await page.waitForTimeout(2000);
    
    // Screenshot pustego systemu znajomych
    await page.screenshot({ 
      path: 'friendship-system-empty.png',
      fullPage: true 
    });
    console.log('üì∏ Screenshot: friendship-system-empty.png');
    
    // Otw√≥rz nowƒÖ kartƒô dla drugiego u≈ºytkownika
    const page2 = await browser.newPage();
    
    // Zarejestruj drugiego u≈ºytkownika
    console.log('üë§ Rejestracja drugiego u≈ºytkownika...');
    await page2.goto('http://localhost:3000/register', { waitUntil: 'networkidle2' });
    await page2.waitForSelector('form');
    
    await page2.type('input[name="firstName"]', 'Anna');
    await page2.type('input[name="lastName"]', 'Nowak');
    await page2.type('input[name="username"]', 'annanowak');
    await page2.type('input[name="email"]', 'anna.nowak@example.com');
    await page2.type('input[name="password"]', 'test123');
    await page2.type('input[name="dateOfBirth"]', '1992-05-15');
    
    await page2.click('button[type="submit"]');
    await page2.waitForNavigation();
    
    // Zaloguj drugiego u≈ºytkownika
    console.log('üîë Logowanie drugiego u≈ºytkownika...');
    await page2.click('a[href="/login"]');
    await page2.waitForSelector('form');
    
    await page2.type('input[name="email"]', 'anna.nowak@example.com');
    await page2.type('input[name="password"]', 'test123');
    
    await page2.click('button[type="submit"]');
    await page2.waitForNavigation();
    
    // Przejd≈∫ do systemu znajomych drugiego u≈ºytkownika
    await page2.click('a[href="/friends"]');
    await page2.waitForTimeout(2000);
    
    // Wr√≥ƒá do pierwszego u≈ºytkownika i wy≈õlij zaproszenie
    console.log('üì® Wysy≈Çanie zaproszenia do znajomych...');
    await page.bringToFront();
    
    // Przejd≈∫ do zak≈Çadki sugestii
    await page.click('button:contains("Sugestie")');
    await page.waitForTimeout(1000);
    
    // Je≈õli sƒÖ sugestie, wy≈õlij zaproszenie
    const suggestions = await page.$$('[data-testid="friend-suggestion"]');
    if (suggestions.length > 0) {
      await page.click('[data-testid="friend-suggestion"] button:contains("Dodaj")');
      await page.waitForTimeout(2000);
    }
    
    // Screenshot z zaproszeniem
    await page.screenshot({ 
      path: 'friendship-system-sent-request.png',
      fullPage: true 
    });
    console.log('üì∏ Screenshot: friendship-system-sent-request.png');
    
    // Przejd≈∫ do drugiego u≈ºytkownika i zaakceptuj zaproszenie
    console.log('‚úÖ Akceptowanie zaproszenia...');
    await page2.bringToFront();
    
    // Przejd≈∫ do zak≈Çadki oczekujƒÖcych
    await page2.click('button:contains("OczekujƒÖce")');
    await page2.waitForTimeout(1000);
    
    // Akceptuj zaproszenie
    const pendingRequests = await page2.$$('[data-testid="pending-request"]');
    if (pendingRequests.length > 0) {
      await page2.click('[data-testid="pending-request"] button:contains("Akceptuj")');
      await page2.waitForTimeout(2000);
    }
    
    // Screenshot po akceptacji
    await page2.screenshot({ 
      path: 'friendship-system-accepted.png',
      fullPage: true 
    });
    console.log('üì∏ Screenshot: friendship-system-accepted.png');
    
    // Wr√≥ƒá do pierwszego u≈ºytkownika i sprawd≈∫ listƒô znajomych
    console.log('üë• Sprawdzanie listy znajomych...');
    await page.bringToFront();
    
    // Przejd≈∫ do zak≈Çadki znajomych
    await page.click('button:contains("Znajomi")');
    await page.waitForTimeout(2000);
    
    // Screenshot listy znajomych
    await page.screenshot({ 
      path: 'friendship-system-friends-list.png',
      fullPage: true 
    });
    console.log('üì∏ Screenshot: friendship-system-friends-list.png');
    
    // Test wyszukiwania znajomych
    console.log('üîç Test wyszukiwania znajomych...');
    const searchInput = await page.$('input[placeholder*="Szukaj"]');
    if (searchInput) {
      await searchInput.type('Anna');
      await page.waitForTimeout(1000);
      
      await page.screenshot({ 
        path: 'friendship-system-search.png',
        fullPage: true 
      });
      console.log('üì∏ Screenshot: friendship-system-search.png');
    }
    
    // Test blokowania u≈ºytkownika
    console.log('üö´ Test blokowania u≈ºytkownika...');
    const friendCards = await page.$$('[data-testid="friend-card"]');
    if (friendCards.length > 0) {
      await page.click('[data-testid="friend-card"] button:contains("Usu≈Ñ")');
      await page.waitForTimeout(1000);
      
      // Potwierd≈∫ usuniƒôcie
      await page.click('button:contains("Tak")');
      await page.waitForTimeout(2000);
      
      await page.screenshot({ 
        path: 'friendship-system-removed.png',
        fullPage: true 
      });
      console.log('üì∏ Screenshot: friendship-system-removed.png');
    }
    
    console.log('‚úÖ Test systemu znajomych zako≈Ñczony pomy≈õlnie!');
    
  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas testowania systemu znajomych:', error);
    await page.screenshot({ 
      path: 'friendship-system-error.png',
      fullPage: true 
    });
  } finally {
    await browser.close();
  }
}

// Uruchom test
testFriendshipSystem().catch(console.error); 