# Portal Project Structure

This is a full-stack portal application with separate frontend and backend directories.

## Key Directories
- `frontend/` - React application with components, pages, and contexts
- `backend/` - Node.js/Express server with controllers, models, and routes
- `ai/` - AI-related functionality (chatbot, TTS)
- `uploads/` - File uploads directory

## Important Files
- [backend/server.js](mdc:backend/server.js) - Main server entry point
- [frontend/src/App.js](mdc:frontend/src/App.js) - React app entry point
- [backend/package.json](mdc:backend/package.json) - Backend dependencies
- [frontend/package.json](mdc:frontend/package.json) - Frontend dependencies

## Backend Structure
- `controllers/` - Business logic for API endpoints
- `models/` - MongoDB/Mongoose schemas
- `routes/` - API route definitions
- `middleware/` - Authentication and other middleware
- `services/` - External service integrations

## Frontend Structure
- `components/` - Reusable React components
- `pages/` - Page-level components
- `contexts/` - React context providers
- `styles/` - Global styles and themes

## Development Commands
- Backend: `cd backend && npm start`
- Frontend: `cd frontend && npm start`
- Use PowerShell syntax (semicolons instead of &&)
description:
globs:
alwaysApply: false
---
