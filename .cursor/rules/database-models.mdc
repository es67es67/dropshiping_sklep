# Database Models and Schemas

## Model Structure
All models are in `backend/models/` and follow Mongoose schema patterns.

## Key Models
- [backend/models/shopModel.js](mdc:backend/models/shopModel.js) - Shop entities with owner, location, products
- [backend/models/userModel.js](mdc:backend/models/userModel.js) - User accounts and authentication
- [backend/models/productModel.js](mdc:backend/models/productModel.js) - Product catalog items
- [backend/models/locationModel.js](mdc:backend/models/locationModel.js) - Geographic locations and hierarchy

## Schema Patterns
```javascript
const mongoose = require('mongoose');

const schemaName = new mongoose.Schema({
  // Required fields
  name: { type: String, required: true },
  
  // References to other models
  owner: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  
  // Arrays and nested objects
  categories: [{ type: String }],
  stats: {
    totalViews: { type: Number, default: 0 }
  },
  
  // Timestamps
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});
```

## Population Requirements
When using populate() in queries, ensure all referenced models are imported:
```javascript
// In test files or scripts
const Shop = require('./models/shopModel');
const User = require('./models/userModel');
const Location = require('./models/locationModel');
```

## Common Fields
- `isActive: { type: Boolean, default: true }` - Soft delete pattern
- `createdAt/updatedAt` - Timestamp tracking
- `owner` - User reference for ownership
- `location` - Geographic location reference

## Database Connection
MongoDB connection is configured in [backend/server.js](mdc:backend/server.js) with fallback connection string.

## Testing Models
Use [backend/test-shops.js](mdc:backend/test-shops.js) as a template for testing model queries and relationships.
description:
globs:
alwaysApply: false
---
