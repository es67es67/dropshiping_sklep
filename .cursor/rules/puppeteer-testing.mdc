# REGUŁY TESTÓW PUPPETEER - STANDARDY I NAJLEPSZE PRAKTYKI

## 🎯 CEL GŁÓWNY

Cursor AI automatycznie uruchamia i monitoruje testy Puppeteer jako kluczowy element workflow, zapewniając wysoką jakość UX i funkcjonalności portalu społecznościowo-handlowego.

## 🛡️ PRIORYTET 1: AUTOMATYCZNE TESTY PUPPETEER

### Przed każdą zmianą kodu:
1. **Automatyczne uruchomienie testów Puppeteer** - sprawdzenie wszystkich ścieżek użytkownika
2. **Analiza screenshotów** - porównanie z baseline'ami
3. **Walidacja funkcjonalności** - sprawdzenie wszystkich kluczowych funkcji
4. **Performance monitoring** - pomiar czasu ładowania i responsywności

### Po każdej zmianie:
```bash
# Automatyczny workflow testów Puppeteer
npm run test:puppeteer:smoke        # Podstawowe testy funkcjonalności
npm run test:puppeteer:friendship   # Testy systemu znajomości
npm run test:puppeteer:notifications # Testy powiadomień
npm run test:puppeteer:ecommerce    # Testy e-commerce
npm run test:puppeteer:responsive   # Testy responsywności
npm run test:puppeteer:performance  # Testy wydajności
npm run test:puppeteer:accessibility # Testy dostępności
```

## 📋 STANDARDY TESTÓW PUPPETEER

### Struktura testów:
```javascript
/**
 * @file test-[feature]-puppeteer.js
 * @description Testy Puppeteer dla funkcji [feature]
 * @author Cursor AI
 * @version 1.0.0
 * @dependencies puppeteer, fs, path
 * @testedFeatures [lista testowanych funkcji]
 * @screenshots [lista generowanych screenshotów]
 */

const puppeteer = require('puppeteer');
const path = require('path');
const fs = require('fs');

// Konfiguracja
const BASE_URL = 'http://localhost:3000';
const API_URL = 'http://localhost:5000/api';
const SCREENSHOT_DIR = path.join(__dirname, 'test-screenshots');

// Upewnij się, że katalog istnieje
if (!fs.existsSync(SCREENSHOT_DIR)) {
  fs.mkdirSync(SCREENSHOT_DIR, { recursive: true });
}

// Funkcja do robienia screenshotów z timestamp
const takeScreenshot = async (page, name) => {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const filename = `${name}_${timestamp}.png`;
  const filepath = path.join(SCREENSHOT_DIR, filename);
  await page.screenshot({ 
    path: filepath, 
    fullPage: true,
    quality: 90
  });
  console.log(`📸 Screenshot: ${filename}`);
  return filepath;
};

// Funkcja do logowania z timestamp
const log = (message) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${message}`);
};

// Funkcja do czekania na element z timeout
const waitForElement = async (page, selector, timeout = 10000) => {
  try {
    await page.waitForSelector(selector, { timeout });
    return true;
  } catch (error) {
    console.log(`❌ Element nie znaleziony: ${selector}`);
    return false;
  }
};
```

### Standardy funkcji testowych:
```javascript
// Funkcja do logowania użytkownika
const loginUser = async (page, email, password) => {
  try {
    log(`🔐 Logowanie użytkownika: ${email}`);
    
    // Przejdź do strony logowania
    await page.goto(`${BASE_URL}/login`);
    await takeScreenshot(page, '01_login_page');
    
    // Wypełnij formularz
    await waitForElement(page, 'input[name="emailOrUsername"], input[name="email"], input[type="email"]');
    await page.type('input[name="emailOrUsername"], input[name="email"], input[type="email"]', email);
    await page.type('input[name="password"], input[type="password"]', password);
    
    // Kliknij przycisk logowania
    await page.click('button[type="submit"], input[type="submit"]');
    
    // Czekaj na przekierowanie
    await page.waitForNavigation({ waitUntil: 'networkidle0', timeout: 10000 });
    
    // Sprawdź czy logowanie się udało
    const currentUrl = page.url();
    if (currentUrl.includes('/login')) {
      log(`❌ Logowanie nieudane - nadal na stronie logowania`);
      await takeScreenshot(page, '02_login_failed');
      return false;
    }
    
    log(`✅ Logowanie udane - przekierowano do: ${currentUrl}`);
    await takeScreenshot(page, '03_after_login');
    return true;
    
  } catch (error) {
    log(`❌ Błąd podczas logowania: ${error.message}`);
    await takeScreenshot(page, 'ERROR_login');
    return false;
  }
};
```

## 🔄 AUTOMATYCZNY WORKFLOW TESTÓW

### Po każdej zmianie kodu:
1. **Automatyczne uruchomienie testów Puppeteer**
2. **Analiza wyników i screenshotów**
3. **Porównanie z baseline'ami**
4. **Automatyczna naprawa jeśli testy nie przechodzą**
5. **Ponowne uruchomienie testów**
6. **Raportowanie wyników**

### Jeśli test nie przejdzie:
```javascript
// Automatyczna analiza błędów
const analyzeTestFailure = async (error, screenshotPath) => {
  log(`🔍 Analizuję błąd testu: ${error.message}`);
  
  // Analiza screenshotu
  if (screenshotPath) {
    log(`📸 Analizuję screenshot: ${screenshotPath}`);
    // Automatyczna analiza wizualna
  }
  
  // Analiza logów konsoli
  const consoleLogs = await page.evaluate(() => {
    return window.console.logs || [];
  });
  
  // Analiza błędów JavaScript
  const jsErrors = await page.evaluate(() => {
    return window.jsErrors || [];
  });
  
  // Propozycja naprawy
  log(`🔧 Proponuję naprawę: ${generateFixProposal(error, consoleLogs, jsErrors)}`);
};
```

## 📊 STANDARDY RAPORTOWANIA

### Automatyczne raporty testów:
```javascript
// Raport testów Puppeteer
const generateTestReport = async (testResults) => {
  const report = {
    timestamp: new Date().toISOString(),
    totalTests: testResults.length,
    passed: testResults.filter(r => r.status === 'passed').length,
    failed: testResults.filter(r => r.status === 'failed').length,
    screenshots: testResults.map(r => r.screenshot),
    performance: {
      averageLoadTime: calculateAverageLoadTime(testResults),
      slowestPage: findSlowestPage(testResults),
      fastestPage: findFastestPage(testResults)
    },
    accessibility: {
      violations: testResults.flatMap(r => r.accessibilityViolations || []),
      score: calculateAccessibilityScore(testResults)
    },
    responsive: {
      mobile: testResults.filter(r => r.device === 'mobile').length,
      tablet: testResults.filter(r => r.device === 'tablet').length,
      desktop: testResults.filter(r => r.device === 'desktop').length
    }
  };
  
  // Zapisz raport
  const reportPath = path.join(SCREENSHOT_DIR, `test-report-${Date.now()}.json`);
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  
  return report;
};
```

## 🎨 STANDARDY SCREENSHOTÓW

### Konwencja nazewnictwa:
```javascript
// Format: [numer]_[nazwa]_[timestamp].png
// Przykłady:
// 01_main_page_2025-07-24T08-16-23-112Z.png
// 02_login_form_2025-07-24T08-16-25-234Z.png
// 03_after_login_2025-07-24T08-16-27-456Z.png
// ERROR_login_2025-07-24T08-16-29-789Z.png

const takeScreenshot = async (page, name) => {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const filename = `${name}_${timestamp}.png`;
  const filepath = path.join(SCREENSHOT_DIR, filename);
  
  // Konfiguracja screenshotu
  await page.screenshot({ 
    path: filepath, 
    fullPage: true,
    quality: 90,
    type: 'png'
  });
  
  console.log(`📸 Screenshot: ${filename}`);
  return filepath;
};
```

### Automatyczna analiza screenshotów:
```javascript
// Porównanie z baseline'ami
const compareWithBaseline = async (currentScreenshot, baselinePath) => {
  if (!fs.existsSync(baselinePath)) {
    log(`⚠️ Brak baseline dla: ${baselinePath}`);
    return { status: 'no_baseline', diff: null };
  }
  
  // Porównanie wizualne
  const diff = await compareImages(currentScreenshot, baselinePath);
  
  if (diff.percentage > 5) {
    log(`❌ Znaleziono różnice wizualne: ${diff.percentage}%`);
    return { status: 'failed', diff: diff.percentage };
  }
  
  log(`✅ Screenshot zgodny z baseline`);
  return { status: 'passed', diff: diff.percentage };
};
```

## 🚀 STANDARDY WYDAJNOŚCI

### Monitoring wydajności:
```javascript
// Pomiar czasu ładowania
const measurePageLoadTime = async (page, url) => {
  const startTime = Date.now();
  
  await page.goto(url, { 
    waitUntil: 'networkidle0',
    timeout: 30000 
  });
  
  const loadTime = Date.now() - startTime;
  
  // Pomiar metryk wydajności
  const performanceMetrics = await page.evaluate(() => {
    const navigation = performance.getEntriesByType('navigation')[0];
    return {
      domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,
      loadComplete: navigation.loadEventEnd - navigation.loadEventStart,
      firstContentfulPaint: performance.getEntriesByName('first-contentful-paint')[0]?.startTime,
      largestContentfulPaint: performance.getEntriesByName('largest-contentful-paint')[0]?.startTime
    };
  });
  
  return {
    totalLoadTime: loadTime,
    ...performanceMetrics
  };
};
```

## ♿ STANDARDY DOSTĘPNOŚCI

### Testy dostępności:
```javascript
// Sprawdzenie dostępności
const checkAccessibility = async (page) => {
  const violations = await page.evaluate(() => {
    // Sprawdź kontrast kolorów
    const contrastIssues = [];
    const elements = document.querySelectorAll('*');
    
    elements.forEach(el => {
      const style = window.getComputedStyle(el);
      const backgroundColor = style.backgroundColor;
      const color = style.color;
      
      // Sprawdź kontrast (uproszczona wersja)
      if (color && backgroundColor) {
        // Implementacja sprawdzania kontrastu
      }
    });
    
    // Sprawdź alt teksty
    const imagesWithoutAlt = Array.from(document.querySelectorAll('img')).filter(img => !img.alt);
    
    // Sprawdź nagłówki
    const headingStructure = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6'))
      .map(h => ({ level: parseInt(h.tagName[1]), text: h.textContent }));
    
    return {
      contrastIssues,
      imagesWithoutAlt,
      headingStructure
    };
  });
  
  return violations;
};
```

## 📱 STANDARDY RESPONSYWNOŚCI

### Testy na różnych urządzeniach:
```javascript
// Konfiguracja urządzeń
const devices = {
  mobile: { width: 375, height: 667, userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15' },
  tablet: { width: 768, height: 1024, userAgent: 'Mozilla/5.0 (iPad; CPU OS 14_0 like Mac OS X) AppleWebKit/605.1.15' },
  desktop: { width: 1920, height: 1080, userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36' }
};

// Test responsywności
const testResponsiveness = async (page, device) => {
  const { width, height, userAgent } = devices[device];
  
  await page.setViewport({ width, height });
  await page.setUserAgent(userAgent);
  
  log(`📱 Testuję na urządzeniu: ${device} (${width}x${height})`);
  
  // Przejdź przez główne strony
  const pages = ['/', '/login', '/register', '/shops', '/products'];
  
  for (const pageUrl of pages) {
    await page.goto(`${BASE_URL}${pageUrl}`);
    await takeScreenshot(page, `${device}_${pageUrl.replace('/', '')}`);
    
    // Sprawdź czy strona jest responsywna
    const isResponsive = await page.evaluate(() => {
      return window.innerWidth <= 768 ? 
        document.querySelector('.mobile-menu, .hamburger') !== null :
        document.querySelector('.desktop-menu') !== null;
    });
    
    if (!isResponsive) {
      log(`⚠️ Problemy z responsywnością na ${device}: ${pageUrl}`);
    }
  }
};
```

## 🔧 AUTOMATYCZNE NAPRAWY

### Jeśli test nie przejdzie:
```javascript
// Automatyczna naprawa problemów
const autoFixTestIssues = async (error, page) => {
  log(`🔧 Próbuję automatyczną naprawę: ${error.message}`);
  
  // Naprawa problemów z logowaniem
  if (error.message.includes('login')) {
    // Sprawdź czy serwer działa
    const serverStatus = await checkServerStatus();
    if (!serverStatus) {
      log(`🚀 Uruchamiam serwer...`);
      await startServer();
    }
  }
  
  // Naprawa problemów z elementami
  if (error.message.includes('selector')) {
    // Spróbuj alternatywne selektory
    const alternativeSelectors = generateAlternativeSelectors(error.selector);
    for (const selector of alternativeSelectors) {
      try {
        await page.waitForSelector(selector, { timeout: 5000 });
        log(`✅ Znaleziono alternatywny selector: ${selector}`);
        break;
      } catch (e) {
        continue;
      }
    }
  }
  
  // Naprawa problemów z timeout
  if (error.message.includes('timeout')) {
    log(`⏰ Zwiększam timeout...`);
    await page.setDefaultTimeout(30000);
  }
};
```

## 📈 MONITORING I RAPORTOWANIE

### Automatyczne raporty:
```javascript
// Codzienny raport testów
const generateDailyReport = async () => {
  const today = new Date().toISOString().split('T')[0];
  const testFiles = fs.readdirSync(SCREENSHOT_DIR)
    .filter(file => file.includes(today))
    .filter(file => file.endsWith('.json'));
  
  const reports = testFiles.map(file => {
    const content = fs.readFileSync(path.join(SCREENSHOT_DIR, file), 'utf8');
    return JSON.parse(content);
  });
  
  const summary = {
    date: today,
    totalTests: reports.reduce((sum, r) => sum + r.totalTests, 0),
    passed: reports.reduce((sum, r) => sum + r.passed, 0),
    failed: reports.reduce((sum, r) => sum + r.failed, 0),
    successRate: 0,
    averageLoadTime: 0,
    criticalIssues: []
  };
  
  summary.successRate = (summary.passed / summary.totalTests) * 100;
  summary.averageLoadTime = reports.reduce((sum, r) => sum + (r.performance?.averageLoadTime || 0), 0) / reports.length;
  
  // Zapisz raport dzienny
  const dailyReportPath = path.join(SCREENSHOT_DIR, `daily-report-${today}.json`);
  fs.writeFileSync(dailyReportPath, JSON.stringify(summary, null, 2));
  
  return summary;
};
```

## 🎯 PODSUMOWANIE

Cursor AI automatycznie:
1. **Uruchamia testy Puppeteer** po każdej zmianie kodu
2. **Analizuje screenshoty** i porównuje z baseline'ami
3. **Monitoruje wydajność** i dostępność
4. **Testuje responsywność** na różnych urządzeniach
5. **Generuje raporty** z wynikami testów
6. **Naprawia problemy** automatycznie gdy to możliwe
7. **Dokumentuje zmiany** w changelogu

**Cel**: Zapewnienie najwyższej jakości UX i funkcjonalności portalu poprzez automatyczne testy przeglądarkowe.
description: Reguły dla automatycznych testów Puppeteer z kompleksowymi standardami i najlepszymi praktykami
globs: ["**/*.js", "**/*.jsx", "**/*.ts", "**/*.tsx"]
alwaysApply: true
---
description:
globs:
alwaysApply: false
---
