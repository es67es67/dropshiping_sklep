# Frontend React Development

## Component Structure
Components are in `frontend/src/components/` and follow this pattern:
- Use functional components with hooks
- Import styled-components for styling
- Use [frontend/src/contexts/AuthContext.jsx](mdc:frontend/src/contexts/AuthContext.jsx) for authentication

## API Integration
API calls should use the environment variable for the backend URL:
```javascript
const apiUrl = process.env.REACT_APP_API_URL || 'https://portal-backend-igf9.onrender.com';
```

## Authentication
Use the AuthContext for user state management:
```javascript
import { useAuth } from '../contexts/AuthContext';
const { user, login, logout } = useAuth();
```

## Styling
Use styled-components for component styling. Global styles are in [frontend/src/styles/GlobalStyles.js](mdc:frontend/src/styles/GlobalStyles.js).

## Error Handling
Always handle API errors gracefully:
```javascript
try {
  const response = await fetch(`${apiUrl}/api/endpoint`);
  if (!response.ok) {
    throw new Error('API error message');
  }
  const data = await response.json();
} catch (err) {
  console.error('Error:', err);
  setError(err.message);
}
```

## File Organization
- `components/` - Reusable UI components
- `pages/` - Route-level components
- `contexts/` - React context providers
- `styles/` - Global styles and themes

## Development Server
Start with: `cd frontend && npm start`
Note: Use semicolons in PowerShell instead of &&.
description:
globs:
alwaysApply: false
---
 