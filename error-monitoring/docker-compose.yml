version: '3.8'

# üîß Docker Compose dla Error Monitoring System
# Zale≈ºno≈õci: Docker, Docker Compose
# Wp≈Çyw: Uruchomienie ca≈Çego systemu
# Je≈õli siƒô zepsuje: system nie dzia≈Ça
# U≈ºywane w: deployment, development

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: error-monitoring-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: error-monitoring
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backend/scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - error-monitoring-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: error-monitoring-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5001
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/error-monitoring?authSource=admin
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      SMTP_FROM: ${SMTP_FROM:-noreply@portal.com}
      ALERT_EMAIL_RECIPIENTS: ${ALERT_EMAIL_RECIPIENTS:-admin@portal.com}
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL:-}
      DISCORD_WEBHOOK_URL: ${DISCORD_WEBHOOK_URL:-}
    ports:
      - "5001:5001"
    depends_on:
      - mongodb
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - error-monitoring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: error-monitoring-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:5001/api
    ports:
      - "3001:3001"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - error-monitoring-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: error-monitoring-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - error-monitoring-network

  # Redis (dla cache i sesji)
  redis:
    image: redis:7-alpine
    container_name: error-monitoring-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - error-monitoring-network

  # Monitoring (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus:latest
    container_name: error-monitoring-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - error-monitoring-network

  grafana:
    image: grafana/grafana:latest
    container_name: error-monitoring-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - error-monitoring-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  error-monitoring-network:
    driver: bridge 